[{"C:\\Dropbox\\IT\\movie\\src\\index.js":"1","C:\\Dropbox\\IT\\movie\\src\\App.js":"2","C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\rootReducer.js":"3","C:\\Dropbox\\IT\\movie\\src\\common\\router.js":"4","C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\favorites.js":"5","C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\movies.js":"6","C:\\Dropbox\\IT\\movie\\src\\store\\actionTypes.js":"7","C:\\Dropbox\\IT\\movie\\src\\components\\navbar\\Navbar.js":"8","C:\\Dropbox\\IT\\movie\\src\\pages\\index.js":"9","C:\\Dropbox\\IT\\movie\\src\\pages\\contacts\\Contacts.js":"10","C:\\Dropbox\\IT\\movie\\src\\pages\\favorites\\Favorites.js":"11","C:\\Dropbox\\IT\\movie\\src\\pages\\film\\Film.js":"12","C:\\Dropbox\\IT\\movie\\src\\pages\\movies\\Movies.js":"13","C:\\Dropbox\\IT\\movie\\src\\components\\heart\\Heart.js":"14","C:\\Dropbox\\IT\\movie\\src\\store\\actions\\actions.js":"15","C:\\Dropbox\\IT\\movie\\src\\static\\config\\index.js":"16","C:\\Dropbox\\IT\\movie\\src\\api\\api.js":"17"},{"size":483,"mtime":1610742042947,"results":"18","hashOfConfig":"19"},{"size":225,"mtime":1610741107535,"results":"20","hashOfConfig":"19"},{"size":182,"mtime":1613208692500,"results":"21","hashOfConfig":"19"},{"size":827,"mtime":1615488826955,"results":"22","hashOfConfig":"19"},{"size":360,"mtime":1614024136469,"results":"23","hashOfConfig":"19"},{"size":3402,"mtime":1616243819379,"results":"24","hashOfConfig":"19"},{"size":274,"mtime":1614188471042,"results":"25","hashOfConfig":"19"},{"size":4575,"mtime":1614280630345,"results":"26","hashOfConfig":"19"},{"size":214,"mtime":1610549813857,"results":"27","hashOfConfig":"19"},{"size":6737,"mtime":1610555256908,"results":"28","hashOfConfig":"19"},{"size":3162,"mtime":1614625979343,"results":"29","hashOfConfig":"19"},{"size":4961,"mtime":1615495003238,"results":"30","hashOfConfig":"19"},{"size":7136,"mtime":1616244020707,"results":"31","hashOfConfig":"19"},{"size":720,"mtime":1611863093759,"results":"32","hashOfConfig":"19"},{"size":828,"mtime":1614189975228,"results":"33","hashOfConfig":"19"},{"size":232,"mtime":1610470236855,"results":"34","hashOfConfig":"19"},{"size":1117,"mtime":1616241982032,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ukakfz",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dropbox\\IT\\movie\\src\\index.js",[],["74","75"],"C:\\Dropbox\\IT\\movie\\src\\App.js",[],"C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\rootReducer.js",[],"C:\\Dropbox\\IT\\movie\\src\\common\\router.js",[],"C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\favorites.js",[],"C:\\Dropbox\\IT\\movie\\src\\store\\reducers\\movies.js",["76"],"import { ADD_FILMS } from '../actionTypes';\r\nimport { TOGGLE_FAVORITES } from '../actionTypes';\r\nimport { ADD_FAVORITES } from '../actionTypes';\r\nimport { ADD_SEARCH } from '../actionTypes';\r\nimport { CLEAR_FILMS } from '../actionTypes';\r\nimport { CHANGE_LIST_TYPE } from '../actionTypes';\r\n\r\nimport { getListFilms, getFavoriteList } from '../../api/api';\r\n\r\nconst initialState = {\r\n    movies: [],\r\n    favorites: [],\r\n    searchWord: '',\r\n    listType: 'fav', // can be fav/search\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_FILMS:\r\n            console.log(action)\r\n            return { ...state, movies: [...state.movies, ...action.films] };\r\n\r\n        case CLEAR_FILMS:\r\n            return { ...state, movies: [] };\r\n\r\n        case ADD_SEARCH:\r\n            return { ...state, searchWord: action.content };\r\n\r\n        case TOGGLE_FAVORITES:\r\n            let fav = [...state.favorites];\r\n            let mov = [...state.movies];\r\n\r\n            let movIndex = mov.findIndex((n) => n.id === action.content);\r\n            mov[movIndex].favorite = !mov[movIndex].favorite;\r\n\r\n            if (!mov[movIndex].favorite) {\r\n                const favIndex = fav.findIndex((n) => n.id === action.content);\r\n                fav.splice(favIndex, 1);\r\n            } else {\r\n                fav ? fav.push(mov[movIndex]) : (fav = [mov[movIndex]]);\r\n            }\r\n\r\n            localStorage.setItem('favoritesFilms', JSON.stringify(fav));\r\n\r\n            return {\r\n                ...state,\r\n                favorites: [...fav],\r\n                movies: [...mov],\r\n            };\r\n\r\n        case ADD_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favorites: [...state.favorites, action.content],\r\n            };\r\n\r\n        case CHANGE_LIST_TYPE:\r\n            return {\r\n                ...state,\r\n                listType: action.content,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// export const actions = {\r\n//     addFilms: (films) => ({ type: 'ADD_FILMS', films }),\r\n//     addFavorites: (favorites) => ({ type: 'ADD_FAVORITES', favorites }),\r\n// };\r\n\r\nexport const addFilms = (films) => ({ type: ADD_FILMS, films });\r\n// export const addFavorites = (favorites) => ({ type: 'ADD_FAVORITES', favorites });\r\n\r\n// export const getFilms = (searchWord, page) => {\r\n//     return dispatch => {\r\n//         getListFilms(searchWord, page).then((results) => {\r\n//             dispatch(addFilms(results));\r\n//         });\r\n//     }\r\n// };\r\n\r\nexport const getFavoriteFilms = (page) => {\r\n    return (dispatch) => {\r\n        getFavoriteList(page).then((results) => {\r\n            // const filmsFromStorage = JSON.parse(\r\n            //     localStorage.getItem('favoritesFilms')\r\n            // );\r\n\r\n            // filmsFromStorage &&\r\n            //     results.map((film) => {\r\n            //         const isFavorite = filmsFromStorage.find((favFilm) => {\r\n            //             return favFilm.id === film.id;\r\n            //         });\r\n\r\n            //         isFavorite\r\n            //             ? (film.favorite = true)\r\n            //             : (film.favorite = false);\r\n            //         return true;\r\n            //     });\r\n            dispatch(addFilms(results));\r\n            // dispatch(actions.addFavorites());\r\n        });\r\n    };\r\n};\r\n\r\nexport default reducer;\r\n","C:\\Dropbox\\IT\\movie\\src\\store\\actionTypes.js",[],"C:\\Dropbox\\IT\\movie\\src\\components\\navbar\\Navbar.js",[],"C:\\Dropbox\\IT\\movie\\src\\pages\\index.js",[],"C:\\Dropbox\\IT\\movie\\src\\pages\\contacts\\Contacts.js",[],"C:\\Dropbox\\IT\\movie\\src\\pages\\favorites\\Favorites.js",[],"C:\\Dropbox\\IT\\movie\\src\\pages\\film\\Film.js",["77"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\nimport { getFilm, getReccomended } from '../../api/api';\r\nimport './Film.scss';\r\n\r\nconst Film = () => {\r\n    const [film, setfilm] = useState([]),\r\n        [recommendedMovies, setRecommendedMovies] = useState([]);\r\n\r\n    let history = useHistory();\r\n    let { id } = useParams();\r\n\r\n    const getData = async () => {\r\n        getFilm(id).then((results) => {\r\n            setfilm(results);\r\n        });\r\n\r\n        getReccomended(id).then((results) => {\r\n            setRecommendedMovies(results.slice(0, 3));\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n\r\n    const imageClick = (id) => {\r\n        history.push(`/movie/${id}`);\r\n        window.location.reload(); // TODO\r\n    };\r\n\r\n    return (\r\n        film.genres !== undefined && (\r\n            <div className=\"movie\">\r\n                <div className=\"movie__header\">\r\n                    <div className=\"movie__title-container\">\r\n                        <span className=\"movie__title\">{film.title}</span>\r\n                        <span className=\"movie__subtitle\">\r\n                            Original title: {film.original_title}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"movie__rating-container\">\r\n                        <span className=\"movie__rating-text\">RATING</span>\r\n                        <span className=\"movie__rating-average-container\">\r\n                            <StarIcon className=\"movie__icon-star\" />\r\n                            <span className=\"movie__rating-average\">\r\n                                {film.vote_average}\r\n                            </span>\r\n                            /10\r\n                        </span>\r\n                        <span className=\"movie__rating-count\">\r\n                            ({film.vote_count})\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"movie__content-container\">\r\n                    <aside className=\"movie__aside\">\r\n                        <img\r\n                            className=\"movie__img\"\r\n                            src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\r\n                            alt={film.title}\r\n                        />\r\n                        <div className=\"movie__genre-container\">\r\n                            {film.genres.map((item) => {\r\n                                return (\r\n                                    <span\r\n                                        className=\"movie__genre\"\r\n                                        key={item.id}>\r\n                                        {item.name}\r\n                                    </span>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </aside>\r\n                    <article className=\"movie__main\">\r\n                        <FavoriteBorderIcon className=\"movie__heart-icon\" />\r\n                        <p>{film.overview}</p>\r\n                        {film.homepage && (\r\n                            <a\r\n                                href={film.homepage}\r\n                                className=\"movie__website-link\">\r\n                                <p>| Movie website ></p>\r\n                            </a>\r\n                        )}\r\n                    </article>\r\n                </div>\r\n                <div className=\"movie__footer\">\r\n                    <span className=\"movie__recom-header\">RECOMMENDATIONS</span>\r\n                    {recommendedMovies !== undefined && (\r\n                        <div className=\"movie__recom\">\r\n                            {recommendedMovies.map((item) => {\r\n                                return (\r\n                                    <img\r\n                                        src={`https://image.tmdb.org/t/p/w185${item.poster_path}`}\r\n                                        alt={item.title}\r\n                                        key={item.id}\r\n                                        className=\"movie__recom-img\"\r\n                                        onClick={() => imageClick(item.id)}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className=\"movie__return-button\"\r\n                        onClick={() => history.push(`/`)}>\r\n                        TO START PAGE\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Film;\r\n","C:\\Dropbox\\IT\\movie\\src\\pages\\movies\\Movies.js",["78","79","80"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport {\r\n    addFavorites,\r\n    changeListType,\r\n    clearFilms,\r\n} from '../../store/actions/actions';\r\nimport Heart from '../../components/heart/Heart';\r\nimport { \r\n    // getFilms, \r\n    getFavoriteFilms, \r\n    addFilms\r\n } from '../../store/reducers/movies';\r\n\r\nimport './Movies.scss';\r\nimport { getFavoriteList, \r\n    getListFilms\r\n } from '../../api/api';\r\n\r\nconst Movies = ({\r\n    addFilms,\r\n    addFavorites,\r\n    films,\r\n    changeListType,\r\n    searchWord,\r\n    listType,\r\n    clearFilms,\r\n    // getFilms,\r\n    getFavoriteFilms,\r\n}) => {\r\n    const [page, setPage] = useState(1);\r\n\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        clearFilms();\r\n        // loadLookingFilms();\r\n        loadFavoriteFilms();\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     console.log('searchWord', searchWord)\r\n    //     if (searchWord) {\r\n    //         // setPage(1);\r\n    //         // changeListType('search');\r\n    //         // loadLookingFilms();\r\n    //     }\r\n    // }, [searchWord]);\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            position: 'fixed',\r\n            bottom: theme.spacing(2),\r\n            right: theme.spacing(2),\r\n        },\r\n    }));\r\n\r\n    function ScrollTop({ children, window }) {\r\n        const classes = useStyles();\r\n        const trigger = useScrollTrigger({\r\n            target: window ? window() : undefined,\r\n            disableHysteresis: true,\r\n            threshold: 100,\r\n        });\r\n\r\n        const handleClick = (event) => {\r\n            const anchor = (\r\n                event.target.ownerDocument || document\r\n            ).querySelector('#back-to-top-anchor');\r\n\r\n            if (anchor) {\r\n                anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Zoom in={trigger}>\r\n                <div\r\n                    onClick={handleClick}\r\n                    role=\"presentation\"\r\n                    className={classes.root}>\r\n                    {children}\r\n                </div>\r\n            </Zoom>\r\n        );\r\n    }\r\n\r\n    // const loadLookingFilms = () => {\r\n    //     getListFilms(\"as\", page).then((results) => {\r\n    //         console.log(results)\r\n    //         addFilms(results);\r\n    //     });\r\n    //     // getFilms(\"searchWord\", page);\r\n    //     setPage(page + 1);\r\n    // };\r\n\r\n    const loadFavoriteFilms = () => {\r\n        // getFavoriteList(page).then((results) => {\r\n        //     const filmsFromStorage = JSON.parse(\r\n        //         localStorage.getItem('favoritesFilms')\r\n        //     );\r\n\r\n        //     filmsFromStorage &&\r\n        //         results.map((film) => {\r\n        //             const isFavorite = filmsFromStorage.find((favFilm) => {\r\n        //                 return favFilm.id === film.id;\r\n        //             });\r\n\r\n        //             isFavorite\r\n        //                 ? (film.favorite = true)\r\n        //                 : (film.favorite = false);\r\n        //             return true;\r\n        //         });\r\n        //     addFilms(results);\r\n        //     addFavorites(filmsFromStorage);\r\n        // });\r\n\r\n        getFavoriteFilms(page);\r\n\r\n        setPage(page + 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Toolbar id=\"back-to-top-anchor\" />\r\n            <InfiniteScroll\r\n                dataLength={films.length}\r\n                // next={listType === 'fav' ? loadFavoriteFilms : loadLookingFilms}\r\n                next={loadFavoriteFilms}\r\n                hasMore={true}\r\n                loader={<h4>Loading...</h4>}>\r\n                <div className=\"movies__row\">\r\n                    {films.map((movie) => {\r\n                        return (\r\n                            <div key={movie.id} className=\"movies\">\r\n                                <div className=\"movies__box\">\r\n                                    <img\r\n                                        className=\"movies__img\"\r\n                                        src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n                                        alt={movie.title}\r\n                                    />\r\n                                    <div className=\"movies__text-container\">\r\n                                        <p className=\"movies__title\">\r\n                                            {movie.title}\r\n                                        </p>\r\n                                        <div className=\"movies__vote-container\">\r\n                                            <span className=\"movies__subtitle\">\r\n                                                Vote average:\r\n                                                <span>\r\n                                                    {movie.vote_average}\r\n                                                </span>\r\n                                            </span>\r\n                                            <Heart\r\n                                                favorite={movie.favorite}\r\n                                                id={movie.id}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className=\"movie__button\"\r\n                                        onClick={() =>\r\n                                            history.push(`/movie/${movie.id}`)\r\n                                        }>\r\n                                        View details\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </InfiniteScroll>\r\n            <ScrollTop>\r\n                <Fab\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    aria-label=\"scroll back to top\">\r\n                    <KeyboardArrowUpIcon />\r\n                </Fab>\r\n            </ScrollTop>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        films: state.movies.movies,\r\n        searchWord: state.movies.searchWord,\r\n        listType: state.movies.listType,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    addFilms,\r\n    addFavorites,\r\n    changeListType,\r\n    clearFilms,\r\n    // getFilms,\r\n    getFavoriteFilms,\r\n})(Movies);\r\n","C:\\Dropbox\\IT\\movie\\src\\components\\heart\\Heart.js",[],"C:\\Dropbox\\IT\\movie\\src\\store\\actions\\actions.js",[],"C:\\Dropbox\\IT\\movie\\src\\static\\config\\index.js",[],"C:\\Dropbox\\IT\\movie\\src\\api\\api.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":8,"column":10,"nodeType":"87","messageId":"88","endLine":8,"endColumn":22},{"ruleId":"89","severity":1,"message":"90","line":29,"column":8,"nodeType":"91","endLine":29,"endColumn":10,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":26,"column":10,"nodeType":"87","messageId":"88","endLine":26,"endColumn":25},{"ruleId":"85","severity":1,"message":"86","line":27,"column":5,"nodeType":"87","messageId":"88","endLine":27,"endColumn":17},{"ruleId":"89","severity":1,"message":"94","line":49,"column":8,"nodeType":"91","endLine":49,"endColumn":10,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'getListFilms' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["98"],"'getFavoriteList' is defined but never used.","React Hook useEffect has missing dependencies: 'clearFilms' and 'loadFavoriteFilms'. Either include them or remove the dependency array. If 'clearFilms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [getData]",{"range":"104","text":"105"},"Update the dependencies array to be: [clearFilms, loadFavoriteFilms]",{"range":"106","text":"107"},[862,864],"[getData]",[1330,1332],"[clearFilms, loadFavoriteFilms]"]